name: Manual Build & Test

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'What to do'
        required: true
        default: 'test'
        type: choice
        options:
        - test
        - build
        - build-and-push
        - full-pipeline
      agent:
        description: 'Which agent (for build actions)'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - crewai-agent
        - langraph-agent
        - adk-agent

env:
  REGISTRY: ghcr.io

jobs:
  manual-action:
    name: ${{ github.event.inputs.action }}
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      if: contains(github.event.inputs.action, 'test') || github.event.inputs.action == 'full-pipeline'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      if: contains(github.event.inputs.action, 'test') || github.event.inputs.action == 'full-pipeline'
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-asyncio httpx black isort
        
    - name: Run linting
      if: contains(github.event.inputs.action, 'test') || github.event.inputs.action == 'full-pipeline'
      run: |
        flake8 agents/ --max-line-length=127 --extend-ignore=E203,W503 || true
        black --check agents/ || true
        isort --check-only agents/ || true
        
    - name: Set up Docker Buildx
      if: contains(github.event.inputs.action, 'build') || github.event.inputs.action == 'full-pipeline'
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      if: github.event.inputs.action == 'build-and-push' || github.event.inputs.action == 'full-pipeline'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build specific agent
      if: github.event.inputs.agent != 'all' && (contains(github.event.inputs.action, 'build') || github.event.inputs.action == 'full-pipeline')
      run: |
        agent=${{ github.event.inputs.agent }}
        echo "Building $agent..."
        
        # Extract metadata
        tag="${{ env.REGISTRY }}/${{ github.repository }}/$agent:manual-$(date +%Y%m%d-%H%M%S)"
        
        docker build -t $agent:test ./agents/$agent/
        
        if [[ "${{ github.event.inputs.action }}" == "build-and-push" || "${{ github.event.inputs.action }}" == "full-pipeline" ]]; then
          docker tag $agent:test $tag
          docker push $tag
          echo "Pushed: $tag"
        fi
        
    - name: Build all agents
      if: github.event.inputs.agent == 'all' && (contains(github.event.inputs.action, 'build') || github.event.inputs.action == 'full-pipeline')
      run: |
        timestamp=$(date +%Y%m%d-%H%M%S)
        
        for agent in crewai-agent langraph-agent adk-agent; do
          echo "Building $agent..."
          docker build -t $agent:test ./agents/$agent/
          
          if [[ "${{ github.event.inputs.action }}" == "build-and-push" || "${{ github.event.inputs.action }}" == "full-pipeline" ]]; then
            tag="${{ env.REGISTRY }}/${{ github.repository }}/$agent:manual-$timestamp"
            docker tag $agent:test $tag
            docker push $tag
            echo "Pushed: $tag"
          fi
        done
        
    - name: Run integration tests
      if: contains(github.event.inputs.action, 'test') || github.event.inputs.action == 'full-pipeline'
      run: |
        # Create test environment
        for agent in crewai-agent langraph-agent adk-agent; do
          echo "GOOGLE_API_KEY=test-key-manual" > agents/$agent/.env
          echo "GEMINI_MODEL=gemini-2.0-flash-exp" >> agents/$agent/.env
        done
        
        # Start services
        docker-compose up -d --build
        sleep 30
        
        # Wait for services
        chmod +x scripts/wait-for-services.sh
        ./scripts/wait-for-services.sh
        
        # Run tests
        python -m pytest tests/test_ci_integration.py -v
        
        # Cleanup
        docker-compose down -v
        
    - name: Summary
      run: |
        echo "Action completed: ${{ github.event.inputs.action }}"
        echo "Agent: ${{ github.event.inputs.agent }}"
        if [[ "${{ github.event.inputs.action }}" == "build-and-push" || "${{ github.event.inputs.action }}" == "full-pipeline" ]]; then
          echo "Images pushed to: ${{ env.REGISTRY }}/${{ github.repository }}"
        fi