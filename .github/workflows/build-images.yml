name: Build and Test Docker Images

on:
  workflow_dispatch:
    inputs:
      agent:
        description: 'Which agent to build (or all)'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - crewai-agent
        - langraph-agent
        - adk-agent
      push_to_registry:
        description: 'Push to GitHub Container Registry'
        required: true
        default: false
        type: boolean
  push:
    branches: [ main ]
    paths:
      - 'agents/**'
      - 'docker-compose.yml'
      - '.github/workflows/build-images.yml'

env:
  REGISTRY: ghcr.io

jobs:
  build-and-test:
    name: Build ${{ matrix.agent }}
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        agent:
          - name: crewai-agent
            port: 8080
          - name: langraph-agent  
            port: 8082
          - name: adk-agent
            port: 8083
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      if: github.event.inputs.push_to_registry == 'true' || github.event_name == 'push'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.agent.name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push image
      uses: docker/build-push-action@v5
      with:
        context: ./agents/${{ matrix.agent.name }}
        platforms: linux/amd64
        push: ${{ github.event.inputs.push_to_registry == 'true' || github.event_name == 'push' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test image locally
      run: |
        # Build for local testing
        docker build -t ${{ matrix.agent.name }}:test ./agents/${{ matrix.agent.name }}/
        
        # Test that Python imports work
        docker run --rm ${{ matrix.agent.name }}:test python -c "
        import sys
        print(f'Python version: {sys.version}')
        
        # Test basic imports
        try:
            import fastapi
            import pydantic
            import uvicorn
            print('✓ Basic dependencies OK')
        except ImportError as e:
            print(f'✗ Import error: {e}')
            sys.exit(1)
        "
        
    - name: Test image startup
      run: |
        # Create test env file
        echo "GOOGLE_API_KEY=test-key" > test.env
        echo "GEMINI_MODEL=gemini-2.0-flash-exp" >> test.env
        
        # Start container
        docker run -d --name test-${{ matrix.agent.name }} \
          --env-file test.env \
          -p ${{ matrix.agent.port }}:${{ matrix.agent.port }} \
          ${{ matrix.agent.name }}:test
        
        # Wait for startup
        sleep 15
        
        # Test health endpoint
        max_attempts=10
        for i in $(seq 1 $max_attempts); do
          if curl -f http://localhost:${{ matrix.agent.port }}/health; then
            echo "✓ ${{ matrix.agent.name }} health check passed"
            break
          else
            if [ $i -eq $max_attempts ]; then
              echo "✗ ${{ matrix.agent.name }} health check failed"
              docker logs test-${{ matrix.agent.name }}
              exit 1
            fi
            echo "Attempt $i/$max_attempts failed, retrying..."
            sleep 3
          fi
        done
        
        # Test other endpoints
        curl -f http://localhost:${{ matrix.agent.port }}/spec || echo "Spec endpoint failed"
        curl -f http://localhost:${{ matrix.agent.port }}/capabilities || echo "Capabilities endpoint failed"
        
        # Cleanup
        docker stop test-${{ matrix.agent.name }}
        docker rm test-${{ matrix.agent.name }}

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio httpx
        
    - name: Create test environment
      run: |
        for agent in crewai-agent langraph-agent adk-agent; do
          echo "GOOGLE_API_KEY=test-key-for-integration" > agents/$agent/.env
          echo "GEMINI_MODEL=gemini-2.0-flash-exp" >> agents/$agent/.env
        done
        
    - name: Start all services
      run: |
        docker-compose up -d --build
        
    - name: Wait for services
      run: |
        chmod +x scripts/wait-for-services.sh
        ./scripts/wait-for-services.sh
        
    - name: Run integration tests
      run: |
        python -m pytest tests/test_ci_integration.py -v --tb=short
        
    - name: Show logs on failure
      if: failure()
      run: |
        echo "=== DOCKER COMPOSE LOGS ==="
        docker-compose logs
        
    - name: Cleanup
      if: always()
      run: |
        docker-compose down -v