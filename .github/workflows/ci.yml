name: CI Pipeline

on:
  workflow_dispatch:
    inputs:
      run_tests:
        description: 'Run tests'
        required: true
        default: true
        type: boolean
      build_images:
        description: 'Build Docker images'
        required: true
        default: true
        type: boolean
  push:
    branches: [ main ]
    paths:
      - 'agents/**'
      - 'docker-compose.yml'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest black isort
        
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Check code formatting with black
      run: |
        black --check --diff agents/
        
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff agents/

  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    strategy:
      matrix:
        agent: [crewai-agent, langraph-agent, adk-agent]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build ${{ matrix.agent }} image
      uses: docker/build-push-action@v5
      with:
        context: ./agents/${{ matrix.agent }}
        push: false
        tags: ${{ matrix.agent }}:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test ${{ matrix.agent }} image
      run: |
        docker run --rm ${{ matrix.agent }}:test python -c "import sys; print(f'Python {sys.version}')"

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-images
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create test environment files
      run: |
        for agent in crewai-agent langraph-agent adk-agent; do
          echo "GOOGLE_API_KEY=test-key-for-ci" > agents/$agent/.env
          echo "GEMINI_MODEL=gemini-2.0-flash-exp" >> agents/$agent/.env
        done
        
    - name: Start services for testing
      run: |
        docker-compose up -d --build
        sleep 30
        
    - name: Wait for services to be ready
      run: |
        chmod +x scripts/wait-for-services.sh
        ./scripts/wait-for-services.sh
        
    - name: Run health checks
      run: |
        chmod +x scripts/health-check.sh
        ./scripts/health-check.sh
        
    - name: Run integration tests
      run: |
        python -m pip install --upgrade pip
        pip install httpx pytest pytest-asyncio
        python -m pytest tests/ -v
        
    - name: Show service logs on failure
      if: failure()
      run: |
        docker-compose logs
        
    - name: Cleanup
      if: always()
      run: |
        docker-compose down -v